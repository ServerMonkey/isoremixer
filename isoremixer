#!/bin/sh
#info: Build a custom Windows iso file with automatic Cygwin installation.
#info: Uses Wine and fastpkg. Run this inside Debian
# shellcheck disable=SC2039

### BASIC #####################################################################

# must run as normal user
if [ "$(id -u)" = 0 ]; then
    echo 'This script must be run as a normal user, not root!' >&2
    exit 1
fi

# parse arguments
if [ -z "$1" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    man isoremixer.1 || ronn -r <README.md | man -l -
    exit
else
    OS_TARGET="$1"
    ARGS="$2"
fi

# colors
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
NOCOL=$(tput sgr0)

### FUNCTIONS #################################################################

error() {
    if [ -n "$1" ]; then
        echo "${RED}Error, aborting:${NOCOL} $1"
    else
        echo "${RED}Error, aborting${NOCOL}"
    fi
    exit 1
}

info() {
    echo "${GREEN}### $1${NOCOL}"
}

require_app() {
    if [ -z "$(command -v "$1")" ]; then
        error "$1 not installed. Install to make this script work."
    fi
}

get_file() {
    fastpkg -p "$1" show -d || error "fastpkg"
}

### VARIABLES #################################################################

case $OS_TARGET in
xp)
    WINE_WINVER="winxp"
    ARCH="x86"
    PKG_CYGWIN="cygwin_2.874"
    PKG_BUILDER="nlite"
    PKG_ISO="windows-xp-pro"
    PKG_DRV_A="virtio-drivers-windows"
    PKG_DRV_B="intel-e1000-driver"
    CYGWIN_PKGS="python,openssh,bzip2,p7zip,unzip,xz,zip,nano,curl,wget"
    ARCHIVE_URL="http://ctm.crouchingtigerhiddenfruitbat.org"
    ARCHIVE_PATH="/pub/cygwin/circa/2016/08/30/104223"
    SUBDIR_BUILDER="Program Files/nLite"
    BIN_BUILDER="nLite.exe"
    ;;
*)
    error "$OS_TARGET is not supported"
    ;;
esac

# auto variables
SP="_"
ARCHIVE_LINK="$ARCHIVE_URL$ARCHIVE_PATH"
PATH_ARCHIVE="$(echo "$ARCHIVE_URL" | awk -F/ '{print $3}')"
PATH_PREFIX="$HOME/.local/share/wineprefixes/$PKG_ISO$SP$PKG_CYGWIN$SP$ARCH"
PATH_C="$PATH_PREFIX/drive_c"
PATH_CYGWIN="$PATH_C/cygwin-setup"
PATH_BUILDER="$PATH_C/$SUBDIR_BUILDER"
PATH_PRESETS_DES="$PATH_BUILDER/Presets"
PATH_ISO="$PATH_C/iso"
PATH_ISO_CYGWIN="$PATH_ISO/cygwin"
EXE_CYGWIN_SETUP="$PATH_CYGWIN/cygwin-setup.exe"
EXE_BUILDER="$PATH_BUILDER/$BIN_BUILDER"
FASTPKG_PKGS="$PKG_CYGWIN $PKG_BUILDER $PKG_ISO $PKG_DRV_A $PKG_DRV_B"
PATH_PRESETS_USER="$HOME/.isoremixer/presets"
PATH_PRESETS_SYSTEM="/usr/local/share/isoremixer/presets"
NAME_CYGWIN_BAT="setup_cygwin.bat"

# init
mkdir -p "$PATH_PRESETS_USER" || error

# find preset configs
SEARCH_PRESETS_A="$PATH_PRESETS_USER/$PKG_BUILDER/$PKG_ISO"
SEARCH_PRESETS_B="$PATH_PRESETS_SYSTEM/$PKG_BUILDER/$PKG_ISO"
if [ -d "$SEARCH_PRESETS_A" ]; then
    PATH_PRESETS_SRC="$SEARCH_PRESETS_A"
elif [ -d "$SEARCH_PRESETS_B" ]; then
    PATH_PRESETS_SRC="$SEARCH_PRESETS_B"
else
    error "Missing preset folder: $SEARCH_PRESETS_A"
fi
info "Presets in: $PATH_PRESETS_SRC"

# find deployment scripts
if [ -f "$PATH_PRESETS_USER/$NAME_CYGWIN_BAT" ]; then
    PATH_SCRIPTS_CYGWIN="$PATH_PRESETS_USER"
elif [ -f "$PATH_PRESETS_SYSTEM/$NAME_CYGWIN_BAT" ]; then
    PATH_SCRIPTS_CYGWIN="$PATH_PRESETS_SYSTEM"
else
    error "Missing cygwin deployment script: $SEARCH_SCRIPT_CYGWIN_A"
fi
info "Scripts in: $PATH_SCRIPTS_CYGWIN"
LIST_SCRIPTS=$(find -L "$PATH_SCRIPTS_CYGWIN" -name 'setup_cygwin*' -type f)

### MAIN ######################################################################

# verify base requirements
require_app fastpkg
require_app wine
require_app winetricks
require_app 7z

# download packges
info "Download fastpkg packages"
sudo fastpkg -q update || error
for i in $FASTPKG_PKGS; do
    sudo fastpkg -p "$i" download || error
done

# more variables
EXE_BUILDER_SETUP="$(get_file $PKG_BUILDER)"
LOG_WINETRICKS="$PATH_PREFIX/winetricks_setup.log"
LOG_7Z="$PATH_PREFIX/7z.log"
LOG_CYGWIN_DL="$PATH_PREFIX/$(basename "$EXE_CYGWIN_SETUP").log"
LOG_BUILDER_SETUP="$PATH_PREFIX/$(basename "$EXE_BUILDER_SETUP").log"
LOG_BUILDER="$PATH_PREFIX/$(basename "$EXE_BUILDER").log"
LOG_COPY="$PATH_PREFIX/copy.log"

# set wine prefix variables
if [ "$ARCH" = "x86" ]; then
    export WINEARCH=win32
elif [ "$ARCH" = "x64" ]; then
    export WINEARCH=win64
else
    error "ARCH not supported"
fi
export WINEPREFIX="$PATH_PREFIX"

# download cygwin
case $OS_TARGET in
xp)
    if [ "$ARGS" = "--only-cygwin" ]; then
        wine "$EXE_CYGWIN_SETUP" \
            --arch="$ARCH" \
            --site="$ARCHIVE_LINK" \
            --no-verify \
            --local-package-dir="C:\cygwin-setup" || error
        exit 0
    elif [ -d "$PATH_CYGWIN" ]; then
        info "Cygwin already downloaded"
        rm -f "$LOG_COPY"
    else
        # create prefix
        info "Create Wine prefix"
        winetricks settings "$WINE_WINVER" 1>/dev/null 2>/dev/null || error

        info "Download Cygwin packages"
        FILE_CYWGIN_SRC="$(get_file $PKG_CYGWIN)" || error
        mkdir -p "$PATH_CYGWIN"
        cp -Lv "$FILE_CYWGIN_SRC" "$EXE_CYGWIN_SETUP" >"$LOG_COPY" || error

        # start
        cd "$PATH_CYGWIN" || error

        # download cygwin packages
        wine "$EXE_CYGWIN_SETUP" \
            --quiet-mode \
            --download \
            --arch="$ARCH" \
            --site="$ARCHIVE_LINK" \
            --no-verify \
            --local-package-dir="C:\cygwin-setup" \
            --packages="$CYGWIN_PKGS" 1>"$LOG_CYGWIN_DL" || error
    fi
    ;;
esac

# build iso
case $OS_TARGET in
xp)
    if [ -d "$PATH_ISO" ]; then
        info "iso folder already created"
    else
        info "Install .NET"
        winetricks -q dotnet20sp2 1>"$LOG_WINETRICKS" 2>&1 || error
        # todo: wine start wine-mono-5.0.0-x86.msi, instead of dotnet20sp2
        info "Install $PKG_BUILDER"
        wine "$EXE_BUILDER_SETUP" "/VERYSILENT" 1>"$LOG_BUILDER_SETUP" || error

        # extract and skip existing files
        info "Extract ISO"
        7z -aos x "$(get_file $PKG_ISO)" -o"$PATH_ISO" 1>"$LOG_7Z" || error
        info "Extract KVM virtio drivers"
        7z -aos x "$(get_file $PKG_DRV_A)" -o"$PATH_C/$PKG_DRV_A" \
            1>"$LOG_7Z" || error
        info "Extract Intel E1000 drivers"
        7z -aos x "$(get_file $PKG_DRV_B)" -o"$PATH_C/$PKG_DRV_B" \
            1>"$LOG_7Z" || error
    fi

    info "Generate builder config"
    mkdir -p "$PATH_PRESETS_DES" || error
    NLITE_CFG="$PATH_BUILDER/nlite.ini"
    echo "[General]" >"$NLITE_CFG"
    echo "NoCompatPop" >>"$NLITE_CFG"
    echo "Path1 = C:\iso" >>"$NLITE_CFG"

    info "Copy preset configs"
    cp -Lv "$PATH_PRESETS_SRC/Last Session.ini" "$PATH_PRESETS_DES/" \
        >>"$LOG_COPY" || error
    cp -Lv "$PATH_PRESETS_SRC/Last Session_u.ini" "$PATH_PRESETS_DES/" \
        >>"$LOG_COPY" || error

    info "Copy deployment scripts"
    mkdir -p "$PATH_ISO_CYGWIN" || error
    for j in $LIST_SCRIPTS; do
        cp -Lvf "$j" "$PATH_ISO_CYGWIN/" >>"$LOG_COPY" || error
    done

    info "Copy Cygwin exe"
    cp -Lvf "$EXE_CYGWIN_SETUP" "$PATH_ISO_CYGWIN/" >>"$LOG_COPY" || error

    info "Copy Cygwin packages to ISO"
    CYGWIN_REPO=$(find -L "$PATH_CYGWIN" -mindepth 1 -maxdepth 1 \
        -name "*$PATH_ARCHIVE*" -type d) || error
    LIST_CYGWIN_REPO=$(find -L "$CYGWIN_REPO" -mindepth 1 -maxdepth 1 \
        -type d) || error
    for k in $LIST_CYGWIN_REPO; do
        cp -LvR "$k" "$PATH_ISO_CYGWIN/" >>"$LOG_COPY" || error
    done

    info "Start $PKG_BUILDER"
    wine "$EXE_BUILDER" 1>"$LOG_BUILDER" 2>&1 || error

    ;;
esac
